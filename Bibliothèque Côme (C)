// Nombre Premier //

bool premier (int n) {
    bool p = true;
    if (n>=2) {
        for (int i = 2; i <= (n/2); i++) {
            if (n%i == 0) {
                p = false;
                break;
            }
        }
    }
    else {
        p = false;
    }
return p;
};


void liste_premier (int a, int n) {
    printf("Liste des nombres premier de %d Ã  %d: ",a,n);
    for (int i = a; i <= n; i++) {
        if (premier (i)) {
            printf(" %d", i);
            }
    }
}




// Expo Rapide //

int expo_rap (int a, int n) {
    if (n == 0) {
        return 1;
        }
    else {
        int b = expo_rap (a, (n/2));
        if (n%2 == 0) {
            return b*b;
        }
        else {
            return a*b*b;
        }
    }
}




// PGCD //

int pgcd (int a, int b) {
    if (b == 0) 
        return a;
    else
        return pgcd (b, (a%b));
}




// Hanoi //

void hanoi (int n, int tige1, int tige2) {
    if (n==0) 
        return;
    else {
        int tige_int = 3 - tige1 - tige2;;
        hanoi ((n-1), tige1, tige_int);
        printf (" %d : -> %d ",tige1,tige2);
        hanoi ((n-1), tige_int, tige2);
    }
}




// Fibonacci //

int acc (int n, int a, int b) {
    if (n==0) {
        return b;
        }
    else {
        return (acc ((n-1), (a+b), a));
        }
}

int fibo (int n) {
    return acc (n,1,1);
}
