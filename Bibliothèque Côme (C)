
##############################################
########ARITHMETIQUE CLASSIQUE################
##############################################


// Nombre Premier //

bool premier (int n) {
    bool p = true;
    if (n>=2) {
        for (int i = 2; i <= (n/2); i++) {
            if (n%i == 0) {
                p = false;
                break;
            }
        }
    }
    else {
        p = false;
    }
return p;
};


void liste_premier (int a, int n) {
    printf("Liste des nombres premier de %d Ã  %d: ",a,n);
    for (int i = a; i <= n; i++) {
        if (premier (i)) {
            printf(" %d", i);
            }
    }
}




// Expo Rapide //

int expo_rap (int a, int n) {
    if (n == 0) {
        return 1;
        }
    else {
        int b = expo_rap (a, (n/2));
        if (n%2 == 0) {
            return b*b;
        }
        else {
            return a*b*b;
        }
    }
}




// PGCD //

int pgcd (int a, int b) {
    if (b == 0) 
        return a;
    else
        return pgcd (b, (a%b));
}




// Hanoi //

void hanoi (int n, int tige1, int tige2) {
    if (n==0) 
        return;
    else {
        int tige_int = 3 - tige1 - tige2;;
        hanoi ((n-1), tige1, tige_int);
        printf (" %d : -> %d ",tige1,tige2);
        hanoi ((n-1), tige_int, tige2);
    }
}




// Fibonacci //

int acc (int n, int a, int b) {
    if (n==0) {
        return b;
        }
    else {
        return (acc ((n-1), (a+b), a));
        }
}

int fibo (int n) {
    return acc (n,1,1);
}




############################
#########TABLEAU############
############################




//Somme//

int somme (int* t, int n) {
    int s = 0;
    for (int i= 0; i <n; i++){
        s += t[i];
    }
return s;
}


// Swap D'indice // 

void swap(int* t, int i, int j){
    int p = t[i];
    t[i] = t[j];
    t[j] = p;
}


// Renversement Tableau //

void reverse(int* t,int n){
    for (int i =0; i<=(n/2); i++) {
        swap (t,i,n-i-1);
    }
}


// Tableau des n premiers entiers //


int* range(int n){
    int* t = (int*)malloc(n*sizeof(int));
    for (int i = 0; i<n;i++){
        t[i] = i;
    }
return t;
}



// Print un Tableau //

void print_tab(int*t,int n) {
    for (int i=0; i<n; i++) {
        printf("%d ",t[i]);
    }
}

// Copie t1 dans t2 //

int* copy(int*t,int*t2,int n, int m){
    for (int i = n; i<m;i++){
        t2[i] = t[i-n];
    }
return t2;
}


// Concat deux tableaux //

int* concat(int* t1, int n1, int* t2, int n2){
    int* t3 = (int*)malloc((n1+n2)*sizeof(int));
    copy (t1,t3,0,n1);
    copy (t2,t3,n1,n2+n1);
    return t3;
}


// Dichotomie //

bool dichotomie (int* t, int i, int j, int e){
    if (i > j)
        return false;
    else {
        int m = (i+j)/2; 
        if (t[m] == e) 
            return true;
        else {
            if (t[m]>e)
                return dichotomie(t,i,(m-1),e);
            else
                return dichotomie(t,(m+1),j,e);
        }
    }
}

